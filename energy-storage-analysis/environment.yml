{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Energy Data Analysis\n",
    "\n",
    "This notebook reads and caches data from multiple CSV files, organizes them into separate text files with relative paths for each category, and normalizes the data year by year based on user-defined variables. Additionally, it calculates the average annual surplus (as a percentage of annual consumption) and the average annual loss."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "language": "python"
   },
   "outputs": [],
   "source": [
    "# Import necessary libraries\n",
    "import pandas as pd\n",
    "import os\n",
    "\n",
    "# Define file paths\n",
    "data_files = {\n",
    "    'consumption': 'path/to/consumption.csv',\n",
    "    'production': 'path/to/production.csv',\n",
    "    'prices': 'path/to/prices.csv'\n",
    "}\n",
    "\n",
    "# Create a directory to store organized data\n",
    "output_dir = 'organized_data'\n",
    "os.makedirs(output_dir, exist_ok=True)\n",
    "\n",
    "# Function to read and cache data\n",
    "def read_and_cache_data(file_path):\n",
    "    return pd.read_csv(file_path, sep=';', decimal=',', thousands='.', parse_dates=True, dayfirst=True)\n",
    "\n",
    "# Read data from CSV files\n",
    "data = {key: read_and_cache_data(file) for key, file in data_files.items()}\n",
    "\n",
    "# Display the first few rows of each dataset\n",
    "for key, df in data.items():\n",
    "    print(f'{key} data:')\n",
    "    print(df.head(), '\\n')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "language": "python"
   },
   "outputs": [],
   "source": [
    "# Normalize data year by year\n",
    "def normalize_data(df, year_col, value_col):\n",
    "    df['Year'] = df[year_col].dt.year\n",
    "    return df.groupby('Year')[value_col].sum().reset_index()\n",
    "\n",
    "# Normalize consumption and production data\n",
    "normalized_consumption = normalize_data(data['consumption'], 'Date', 'Consumption [MWh]')\n",
    "normalized_production = normalize_data(data['production'], 'Date', 'Production [MWh]')\n",
    "\n",
    "# Save normalized data to text files\n",
    "normalized_consumption.to_csv(os.path.join(output_dir, 'normalized_consumption.txt'), index=False, sep='\\t')\n",
    "normalized_production.to_csv(os.path.join(output_dir, 'normalized_production.txt'), index=False, sep='\\t')\n",
    "\n",
    "# Display normalized data\n",
    "print('Normalized Consumption:')\n",
    "print(normalized_consumption)\n",
    "print('\\nNormalized Production:')\n",
    "print(normalized_production)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "language": "python"
   },
   "outputs": [],
   "source": [
    "# Calculate average annual surplus and loss\n",
    "def calculate_surplus_loss(consumption, production):\n",
    "    merged = pd.merge(consumption, production, on='Year', suffixes=('_consumption', '_production'))\n",
    "    merged['Surplus'] = merged['Production [MWh]'] - merged['Consumption [MWh]']\n",
    "    average_surplus = (merged['Surplus'].mean() / merged['Consumption [MWh]'].mean()) * 100\n",
    "    average_loss = merged['Surplus'][merged['Surplus'] < 0].mean()\n",
    "    return average_surplus, average_loss\n",
    "\n",
    "# Calculate average surplus and loss\n",
    "average_surplus, average_loss = calculate_surplus_loss(normalized_consumption, normalized_production)\n",
    "\n",
    "# Display results\n",
    "print(f'Average Annual Surplus (% of Consumption): {average_surplus:.2f}%')\n",
    "print(f'Average Annual Loss (MWh): {average_loss:.2f}')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}