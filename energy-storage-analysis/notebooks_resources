{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Energy Data Analysis\n",
    "\n",
    "This notebook reads and caches data from multiple CSV files, organizes them into separate text files, normalizes the data year by year, and calculates the average annual surplus and loss."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import os\n",
    "\n",
    "# Define file paths\n",
    "data_files = {\n",
    "    'consumption': 'path/to/your/consumption_data.csv',\n",
    "    'production': 'path/to/your/production_data.csv',\n",
    "    'prices': 'path/to/your/prices_data.csv'\n",
    "}\n",
    "\n",
    "# Create a directory to store organized text files\n",
    "output_dir = 'organized_data'\n",
    "os.makedirs(output_dir, exist_ok=True)\n",
    "\n",
    "# Function to read and cache data\n",
    "def read_and_cache_data(file_path):\n",
    "    return pd.read_csv(file_path, sep=';', decimal=',', thousands='.', parse_dates=True, dayfirst=True)\n",
    "\n",
    "# Read and cache data\n",
    "data = {key: read_and_cache_data(path) for key, path in data_files.items()}\n",
    "\n",
    "# Save data to text files\n",
    "for key, df in data.items():\n",
    "    df.to_csv(os.path.join(output_dir, f'{key}_data.txt'), sep='\\t', index=False)\n",
    "    print(f'Saved {key} data to {key}_data.txt')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Normalize data year by year\n",
    "def normalize_data(data, year_col, value_col):\n",
    "    data[year_col] = data[year_col].dt.year\n",
    "    return data.groupby(year_col)[value_col].sum().reset_index()\n",
    "\n",
    "# Normalize consumption and production data\n",
    "annual_consumption = normalize_data(data['consumption'], 'Datum von', 'Netzlast [MWh] Originalauflösungen')\n",
    "annual_production = normalize_data(data['production'], 'Datum von', 'Erzeugung [MWh]')  # Adjust column name as needed\n",
    "\n",
    "# Merge annual data\n",
    "annual_data = pd.merge(annual_consumption, annual_production, on='year', suffixes=('_consumption', '_production'))\n",
    "annual_data['surplus'] = annual_data['Erzeugung [MWh]'] - annual_data['Netzlast [MWh] Originalauflösungen']\n",
    "annual_data['loss'] = annual_data['Netzlast [MWh] Originalauflösungen'] - annual_data['Erzeugung [MWh]']\n",
    "annual_data['surplus_percentage'] = (annual_data['surplus'] / annual_data['Netzlast [MWh] Originalauflösungen']) * 100\n",
    "\n",
    "# Calculate average annual surplus and loss\n",
    "average_surplus = annual_data['surplus_percentage'].mean()\n",
    "average_loss = annual_data['loss'].mean()\n",
    "\n",
    "# Display results\n",
    "print(f'Average Annual Surplus: {average_surplus:.2f}%')\n",
    "print(f'Average Annual Loss: {average_loss:.2f} MWh')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}